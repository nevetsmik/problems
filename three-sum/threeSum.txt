const threeSum = nums => {
  let sets = {};
  let result = [];

  let numsCopy = nums.sort((a, b) => a - b);
  let negativeNums = numsCopy.filter(num => num < 0);
  let positiveNums = numsCopy.filter(num => num >= 0);

  if (negativeNums.length === 0 || positiveNums.length === 0) {
    return [];
  }

  for (let i = 0; i < negativeNums.length; i++) {
    for (let j = 0; j < positiveNums.length; j++) {
      let sum = negativeNums[i] + positiveNums[j];
      let answer;
      if (sum > 0) {
        answer = bSearch(negativeNums, sum * -1, i);
      } else {
        answer = bSearch(positiveNums, sum * -1, j);
      }
      if (answer) {
        let key = `${negativeNums[i]}, ${positiveNums[j]}, ${answer}`;
        sets[key] = true;
      }
    }
  }

  Object.keys(sets).forEach(set => {
    let array = set.split(",").map(Number);
    result.push(array);
  });

  return result;
};

const bSearch = (nums, target, index, left, right) => {
  left = left || 0;
  right = right || nums.length - 1;

  while (left <= right) {
    let midpoint = Math.floor((right - left + 1) / 2) + left;

    if (nums[midpoint] === target && midpoint !== index) {
      return nums[midpoint];
    }

    if (target < nums[midpoint]) {
      right = midpoint - 1;
    } else {
      left = midpoint + 1;
    }
  }
  return null;
};
